version: "{build}-{branch}"

environment:

  CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\run_with_env.cmd"

  matrix:
    - JOB: "Python 2.7"
      TOXENV: "py27"
      PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.13"
      PYTHON_ARCH: "64"

    - JOB: "Python 3.5"
      TOXENV: "py35"
      PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.2"
      PYTHON_ARCH: "64"
init:
  - "ECHO %TOXENV%"

install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements/flake8.txt -r requirements/tests.txt"

  # Make a python3.4.bat file in the current directory so that tox will find it
  # and python3.4 will mean what we want it to.
  - "python -c \"import os; open('python{0}.{1}.bat'.format(*os.environ['TOXENV'][2:]), 'w').write('@{0}\\\\python \\x25*\\n'.format(os.environ['PYTHON']))\""

build_script:
  - "%CMD_IN_ENV% python setup.py install"

test_script:
  - "%CMD_IN_ENV% %PYTHON%\\Scripts\\tox"
